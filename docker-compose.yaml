version: '3.4'

services:
  mysql:
    container_name: mysql
    hostname: mysql
    image: juliocesarmidia/mysql:8.0
    build:
      context: ./mysql
    ports:
      - '3336:3306'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASS}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_HOST: "%"
      DEBEZIUM_USER: ${DEBEZIUM_USER}
      DEBEZIUM_PASS: ${DEBEZIUM_PASS}
    networks:
      - subnet_0
    restart: on-failure
    volumes:
      - mysql-data:/var/lib/mysql

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:6.0.0
    restart: on-failure
    networks:
      - subnet_0
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    container_name: kafka
    hostname: kafka
    image: confluentinc/cp-kafka:6.0.0
    restart: on-failure
    networks:
      - subnet_0
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  kafka-connect:
    container_name: kafka-connect
    hostname: kafka-connect
    image: juliocesarmidia/kafka-connect:6.0.0
    stdin_open: yes
    tty: yes
    build:
      context: ./kafka-connect
      args:
        BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS:-kafka:9092}
    restart: on-failure
    networks:
      - subnet_0
    ports:
      - 8083:8083
    volumes:
      - connector-data:/data/

  kafka-connect-setup:
    container_name: kafka-connect-setup
    hostname: kafka-connect-setup
    image: juliocesarmidia/kafka-connect-setup:6.0.0
    stdin_open: yes
    tty: yes
    build:
      context: ./kafka-connect-setup
    restart: "no"
    networks:
      - subnet_0
    environment:
      KAFKA_CONNECT_URI: http://kafka-connect:8083
      DEBEZIUM_USER: ${DEBEZIUM_USER}
      DEBEZIUM_PASS: ${DEBEZIUM_PASS}
      FORCE_RECREATE: 1

  control-center:
    container_name: control-center
    hostname: control-center
    image: confluentinc/cp-enterprise-control-center:6.0.0
    restart: on-failure
    networks:
      - subnet_0
    ports:
      - 9021:9021
    environment:
      PORT: 9021
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_CONNECT_KAFKA-CONNECT_CLUSTER: http://kafka-connect:8083
      CONTROL_CENTER_REST_LISTENERS: http://0.0.0.0:9021

  producer:
    container_name: producer
    hostname: producer
    image: juliocesarmidia/producer:1.0.0
    build:
      context: ./producer
    restart: on-failure
    networks:
      - subnet_0
    environment:
      PRODUCER_BOOTSTRAP_SERVERS: kafka:9092
      TOPICS: ${TOPICS:-topic_0,topic_1,topic_2}

  consumer:
    container_name: consumer
    hostname: consumer
    image: juliocesarmidia/consumer:1.0.0
    build:
      context: ./consumer
    restart: on-failure
    networks:
      - subnet_0
    environment:
      CONSUMER_BOOTSTRAP_SERVERS: kafka:9092
      TOPICS: ${TOPICS:-jdbc-connector-users}

  api:
    container_name: api
    hostname: api
    image: juliocesarmidia/api:1.0.0
    build:
      context: ./api
    ports:
      - 5000:5000
    restart: on-failure
    networks:
      - subnet_0

  # schema-registry:
  #   container_name: schema-registry
  #   hostname: schema-registry
  #   image: confluentinc/cp-schema-registry:6.0.0
  #   restart: on-failure
  #   networks:
  #     - subnet_0
  #   ports:
  #     - 8081:8081
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # kafka-rest:
  #   container_name: kafka-rest
  #   hostname: kafka-rest
  #   image: confluentinc/cp-kafka-rest:6.0.0
  #   restart: on-failure
  #   networks:
  #     - subnet_0
  #   ports:
  #     - 8082:8082
  #   environment:
  #     KAFKA_REST_HOST_NAME: rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
  #     KAFKA_REST_LISTENERS: http://0.0.0.0:8082
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  # elasticsearch:
  #   container_name: elasticsearch
  #   hostname: elasticsearch
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
  #   environment:
  #     ES_JAVA_OPTS: "-Xms512m -Xmx512m"
  #     bootstrap.memory_lock: "true"
  #     discovery.type: "single-node"
  #     node.name: elasticsearch
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   networks:
  #     - subnet_0

networks:
  subnet_0:
    driver: bridge

volumes:
  mysql-data: {}
  zookeeper-data: {}
  connector-data: {}
  # elasticsearch-data: {}
